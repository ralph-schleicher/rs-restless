RS-RESTLESS

A Common Lisp library for communicating with web services.

The RESTless library provides convenience functions for HTTP
requests/responses, URI handling, JSON encoding/decoding, RDF/XML
parsing, OAuth 1.0a user authorization, OSLC clients, and more.

                                                                     [Condition]
http-informational
   HTTP status for an informational response.
   A ‘http-informational’ condition indicates an interim response
   for communicating connection status or request progress prior to
   completing the requested action and sending a final response.
   The status code should be in the range from 100 to 199.

   Class precedence list:

        ‘http-informational’, ‘http-status’, ...

                                                                     [Condition]
http-redirection
   HTTP status for a redirection response.
   A ‘http-redirection’ condition indicates that further action needs
   to be taken by the user agent in order to fulfill the request.
   The status code should be in the range from 300 to 399.

   Class precedence list:

        ‘http-redirection’, ‘http-status’, ...

                                                                     [Condition]
http-server-error
   HTTP status for a server error response.
   A ‘http-server-error’ condition indicates that the server failed to
   fulfill an apparently valid request.  The status code should be in
   the range from 500 to 599.

   Class precedence list:

        ‘http-server-error’, ‘http-status’, ‘error’, ...

                                                                     [Condition]
http-status
   HTTP status information.
   The base class for all HTTP status conditions.

   Class precedence list:

        ‘http-status’, ‘condition’, ...

                                                                         [Class]
doors-client
   DOORS Web Access client.

   DOORS Web Access provides an OSLC interface for the DOORS requirements
   management system.

                                                                     [Condition]
http-client-error
   HTTP status for a client error response.
   A ‘http-client-error’ condition indicates that the client seems to
   have erred.  The status code should be in the range from 400 to 499.

   Class precedence list:

        ‘http-client-error’, ‘http-status’, ‘error’, ...

                                                                     [Condition]
http-successful
   HTTP status for a successful response.
   A ‘http-successful’ condition indicates that the client's request
   was successfully received, understood, and accepted.  The status
   code should be in the range from 200 to 299.

   Class precedence list:

        ‘http-successful’, ‘http-status’, ...

                                                                         [Class]
oauth1-client
   Base class for OAuth 1.0a clients.

                                                                         [Class]
oslc-client
   Base class for OSLC clients.

                                                                     [Condition]
soap-fault
   Condition type for a SOAP fault.

   Class precedence list:

        ‘soap-fault’, ‘error’, ...

                                                              [Special Variable]
*json-keyword-package*
   Home package for the keys of JSON object members.
   A value of ‘nil’ means that keys are strings.

                                                              [Special Variable]
*oslc-client*
   The default OSLC client.

                                                              [Special Variable]
*rdf-triples*
   Convenience variable for binding RDF triples.

                                                              [Special Variable]
*soap-namespace-prefix*
   The SOAP namespace prefix.
   Value has to be a string.  Default is ‘env’.

                                                              [Special Variable]
*soap-version*
   The SOAP standard identifier.
   Possible values together with their meaning are listed in the
   following table.

        :soap-1.2
             SOAP version 1.2, see ‹https://www.w3.org/TR/soap12/›.

        :soap-1.1
             SOAP version 1.1 (this is no standard, just a note),
             see ‹https://www.w3.org/TR/2000/NOTE-SOAP-20000508/›.

   Default is ‘:soap-1.2’.

                                                              [Special Variable]
*xml-document*
   Convenience variable for binding an XML document.

                                                              [Special Variable]
*xml-namespaces*
   Alist of well known XML namespaces.
   List elements are cons cells of the form ‘(PREFIX . NAME)’ where
   PREFIX is the common namespace prefix and NAME is the standardized
   namespace name.

   The predefined namespace prefixes are ‘xml’ for the XML namespace,
   ‘xs’ and ‘xsd’ for the XML schema namespace, ‘xsi’ for the XML schema
   instance namespace, and ‘xsl’ and ‘xslt’ for the XSL transformation
   namespace.

                                                                      [Function]
add-text-content-type (datum)
   Register media type DATUM as a text content type.

                                                                      [Function]
browse-oslc-service-provider-catalog (url &optional (client *oslc-client*))
   Browse an OSLC service provider catalog.

   Value is a tree of service provider catalogs of the form

        ((URL . TITLE) LEAFS)

   The LEAFS is a list of subordinate service provider catalogs or
   service providers.  A service provider has the form ‘(URL . TITLE)’.
   Thus, service provider catalogs are lists and service providers are
   cons cells.

                                                                      [Function]
ensure-http-status (code &rest arguments)
   Check for certain HTTP status codes.

   First argument CODE is the HTTP status code to be checked.
   The remaining arguments specify the set of valid HTTP status
    codes.  Each argument has to be either an integer, a cons cell
    of the form ‘(LOW . HIGH)’, or the symbol of a ‘http-status’
    condition.

   Return CODE if it is a member of the set of valid HTTP status
   codes.  Otherwise, signal an error with a condition created by
   calling ‘(make-http-status CODE)’.

   Exceptional situations:

      * Signals a type error if an argument is not of the correct
        type.

                                                                        [Method]
http-status-code ((condition http-status))
   Not documented.

                                                                        [Method]
http-status-reason ((condition http-status))
   Not documented.

                                                                      [Function]
json-decode (&optional (stream *standard-input*))
   Read a JSON value and return it as Lisp data.

                                                                      [Function]
json-decode-from-string (string)
   Like ‘json-decode’ but read the JSON value from STRING.

                                                                      [Function]
json-encode (data &optional (stream *standard-output*))
   Print Lisp data as a JSON value.
   This is the inverse of the ‘json-decode’ function.

                                                                      [Function]
json-encode-to-string (data)
   Like ‘json-encode’ but return the output as a string.

                                                                      [Function]
json-object-key (name)
   Return the JSON object key for the string NAME.
   If the ‘*json-keyword-package*’ parameter is not null, keys for
   JSON object members are symbols in that package.  Otherwise, keys
   are strings.

                                                                      [Function]
make-http-status (code &optional reason)
   Create a ‘http-status’ condition.

   First argument CODE is the HTTP status code.  Value should
    be a non-negative integer in the range from 100 to 599.
   Optional second argument REASON is the HTTP status reason
    phrase.  Value has to be a string.  If argument REASON is
    omitted or ‘nil’, attempt to determine the reason phrase
    from the status code.

   The returned condition is a sub-type of ‘http-status’ if CODE is
   in the range from 100 to 599.  Otherwise, the return value is a
   condition of type ‘http-status’.

                                                                      [Function]
make-oauth1-client (&key (class 'oauth1-client) user-name password consumer-key
                    secret-key)
   Create an OAuth client.

                                                                      [Function]
make-oslc-client (base-url &rest arguments &key (class 'oslc-client)
                  &allow-other-keys)
   Create an OSLC client.

   The base URL must not end with a slash.

                                                                      [Function]
make-soap-fault (datum)
   Create a ‘soap-fault’ condition.

   Argument DATUM is a SOAP message designator.  Value is either
    a stream, a string, a pathname, or a DOM node.

   If the SOAP message contains a ‘Fault’ element, return value is
   a ‘soap-fault’ condition.  Otherwise, return ‘nil’.

   Exceptional situations:

      * Signals an error if DATUM does not designate a SOAP message.

                                                                        [Method]
oauth1-access-token-url ((oauth1-client oauth1-client))
   URL to obtain an access token.

                                                                        [Method]
oauth1-consumer-key ((oauth1-client oauth1-client))
   Consumer key with the service provider.

                                                                      [Function]
oauth1-http-request (request-uri &rest arguments &key client unsigned
                     (method :get) parameters headers &allow-other-keys)
   Issue an OAuth 1.0a authorized HTTP request.

   First argument REQUEST-URI is the requested URI.
   Keyword argument CLIENT is the OAuth client object.
   If keyword argument UNSIGNED is true, the HTTP request will not use
    the client's OAuth authentication credentials.  Otherwise, the HTTP
    request will be signed and authorized – including a silent refresh in
    case an authorization error occurs.
   Keyword argument METHOD is the HTTP method, e.g. ‘:get’ or ‘:put’.
   Keyword argument PARAMETERS is an alist of parameters.  The parameters
    are usually added to the query part of the request URI.  However, for
    a POST request, the parameters comprise the body of the request.
   Keyword argument HEADERS is an alist of additional HTTP headers which
    should be sent with the request.
   Remaining keyword arguments are forwarded to the underlying Drakma
    HTTP request.

   Return the values of the Drakma HTTP request.

                                                                        [Method]
oauth1-password ((oauth1-client oauth1-client))
   Password for the user authorization process.

                                                                        [Method]
oauth1-request-token-url ((oauth1-client oauth1-client))
   URL to obtain an unauthorized request token.

                                                                        [Method]
oauth1-secret-key ((oauth1-client oauth1-client))
   Consumer secret with the service provider.

                                                                        [Method]
oauth1-user-authorization-cleanup ((client oauth1-client))
   Cleanup the OAuth user authorization process.

                                                                        [Method]
oauth1-user-authorization-setup ((client doors-client))
   Setup the OAuth user authorization process.

                                                                        [Method]
oauth1-user-authorization-setup ((client oauth1-client))
   Setup the OAuth user authorization process.

                                                                        [Method]
oauth1-user-authorization-url ((oauth1-client oauth1-client))
   URL to authorize the request token by the user.

                                                                        [Method]
oauth1-user-name ((oauth1-client oauth1-client))
   User name for the user authorization process.

                                                                      [Function]
oslc-invoke (method request-uri &rest arguments &key (client *oslc-client*)
             parameters headers (accept "application/rdf+xml")
             (oslc-core-version "2.0") &allow-other-keys)
   Invoke an OSLC REST method.

   First argument METHOD is the HTTP method, e.g. ‘:get’ or ‘:put’.
   Second argument REQUEST-URI is the REST API end point.
   Keyword argument CLIENT is the OSLC client object.
   If keyword argument UNSIGNED is true, the HTTP request will not use
    the client's OAuth authentication credentials.  Otherwise, the HTTP
    request will be signed and authorized – including a silent refresh in
    case an authorization error occurs.
   Keyword argument PARAMETERS is an alist of parameters.  The parameters
    are usually added to the query part of the request URI.  However, for
    a POST request, the parameters comprise the body of the request.
   Keyword argument HEADERS is an alist of additional HTTP headers which
    should be sent with the request.
   If keyword argument ACCEPT is non-null, it specifies the contents of
    the ‘Accept’ header.  Default is ‘application/rdf+xml’.
   If keyword argument OSLC-CORE-VERSION is non-null, it specifies the
    contents of the ‘OSLC-Core-Version’ header sent.  Default is ‘2.0’.
   Remaining keyword arguments are forwarded to the underlying Drakma
    HTTP request.

   Return the values of the Drakma HTTP request.

                                                                      [Function]
oslc-root-services-url (&optional (client *oslc-client*))
   Return the URL of the OSLC root services document.

                                                                        [Method]
oslc-service-provider-catalogs ((source wilbur:db) (domain (eql :rm)))
   Return all service provider catalogs in the requirements management domain.

                                                                        [Method]
oslc-service-provider-catalogs ((source wilbur:db) (namespace wilbur:node))
   Return all service provider catalogs for a domain.

   First argument SOURCE is the RDF database.
   Second argument DOMAIN is the OSLC domain.  Value is a either the OSLC
    namespace prefix or namespace name of the OSLC domain, or a keyword.

   Value is a list of URLs.

                                                                        [Method]
oslc-service-provider-catalogs (source (namespace string))
   Return all service provider catalogs for a domain.

   First argument SOURCE is the RDF database.
   Second argument DOMAIN is the OSLC domain.  Value is a either the OSLC
    namespace prefix or namespace name of the OSLC domain, or a keyword.

   Value is a list of URLs.

                                                                        [Method]
oslc-service-provider-catalogs ((source oslc-client) domain)
   Return all service provider catalogs for a domain.

   First argument SOURCE is the RDF database.
   Second argument DOMAIN is the OSLC domain.  Value is a either the OSLC
    namespace prefix or namespace name of the OSLC domain, or a keyword.

   Value is a list of URLs.

                                                                      [Function]
parse-rdf/xml (source &rest arguments)
   Parse an RDF/XML document.

   First argument SOURCE is the RDF/XML document; value has to be a
    stream, a pathname, or a string.
   Remaining arguments are passed to the ‘cl-rdfxml:parse-document’
    function.

   Value is a list of triples.

                                                                      [Function]
remove-text-content-type (datum)
   Unregister media type DATUM as a text content type.

                                                                        [Method]
soap-fault-code ((condition soap-fault))
   Not documented.

                                                                        [Method]
soap-fault-detail ((condition soap-fault))
   Not documented.

                                                                        [Method]
soap-fault-message ((condition soap-fault))
   Not documented.

                                                                        [Method]
soap-fault-node ((condition soap-fault))
   Not documented.

                                                                        [Method]
soap-fault-reason ((condition soap-fault))
   Not documented.

                                                                        [Method]
soap-fault-role ((condition soap-fault))
   Not documented.

                                                                        [Method]
soap-fault-version ((condition soap-fault))
   Not documented.

                                                                      [Function]
soap-http-request (request-uri message &rest options &key (method :post)
                   (fault-error-p t) (if-not-successful :error)
                   &allow-other-keys)
   Send a SOAP message via HTTP.

   First argument REQUEST-URI is the SOAP end point.
   Second argument MESSAGE is the SOAP message (a string).  See the
    ‘with-soap-envelope’ macro for how to serialize a SOAP message.
   Keyword argument METHOD is the HTTP method.  Default is ‘:post’.
   If keyword argument FAULT-ERROR-P is true, signal an error of type
    ‘soap-fault’ if the HTTP status code is 500.  Enabled by default.
   Keyword argument IF-NOT-SUCCESSFUL specifies the action to be taken
    if the HTTP status code is not in the range from 200 to 299.  A value
    of ‘:error’ means to signal an error of type ‘http-status’ and ‘nil’
    means to do nothing.  Default is ‘:error’.

   Remaining keyword arguments are forwarded to the underlying Drakma
    HTTP request.

   Return the values of the Drakma HTTP request.

                                                                        [Method]
string-from-uri ((uri string))
   Return the string representation of an URI.

                                                                        [Method]
string-from-uri ((uri quri.uri:uri))
   Return the string representation of an URI.

                                                                        [Method]
string-from-uri ((uri puri:uri))
   Return the string representation of an URI.

                                                                      [Function]
trace-drakma-requests (&optional (enable t))
   Enable or disable tracing of Drakma HTTP requests.

                                                                      [Function]
wilbur-add-namespaces (namespaces)
   Announce namespaces to Wilbur.

   Argument NAMESPACES is an alist with cons cells of the
   form ‘(PREFIX . URI)’.

                                                                      [Function]
wilbur-parse-rdf/xml (source source-uri &key destination (parser :cl-rdfxml))
   Parse an RDF/XML document into a Wilbur database.

   First argument SOURCE is the RDF/XML document; value has to be
    a stream, a pathname, or a string.
   Second argument SOURCE-URI is the URI of the RDF/XML document.
    The source URI is only required if the RDF description element
    has no ‘about’ attribute (TBC).
   Keyword argument DESTINATION is the Wilbur database; ‘nil’ means
    to create a new database.
   Keyword argument PARSER is the RDF/XML parser.  Value is either
    ‘:wilbur’ (the built-in Wilbur RDF/XML parser) or ‘:cl-rdfxml’.

   Return value is the Wilbur database.

                                                                         [Macro]
with-drakma-response ((&optional body-var status-code-var headers-var url-var
                       reason-phrase-var)
                      request &body forms)
   Wrapper for a Drakma HTTP request.

   Optional arguments BODY-VAR, STATUS-CODE-VAR, HEADERS-VAR, URL-VAR,
    and REASON-PHRASE-VAR are symbols for binding the corresponding
    return value of the ‘drakma:http-request’ function; ‘nil’ means to
    ignore the value.
   Second argument REQUEST is any form returning the same values as a
    ‘drakma:http-request’ function call.
   Remaining arguments FORMS is the macro body.

   If the body, i.e. the primary value, of the HTTP request is a stream,
   the ‘with-drakma-response’ macro ensures that it will be closed.

                                                                         [Macro]
with-soap-envelope ((&rest options &key version namespace-prefix
                     xml-declaration xml-namespaces header &allow-other-keys)
                    &body body)
   Create a SOAP message, i.e. an XML document.

   Keyword argument VERSION is the SOAP standard identifier.
    The resulting SOAP message will conform to this SOAP version.
    Default is the value of the ‘*soap-version*’ special variable.
   Keyword argument NAMESPACE-PREFIX is the SOAP namespace prefix
    for the SOAP message.  Value has to be a string.  Default is
    the value of the ‘*soap-namespace-prefix*’ special variable.
   If keyword argument XML-DECLARATION is true, add an XML declaration
    to the SOAP message.  Default is to omit the XML declaration.
   Keyword argument XML-NAMESPACES is a list of additional XML namespaces
    for the XML document.  List elements are either XML namespace objects
    or strings.  For XML namespace objects, the namespace prefix and name
    is evaluated by calling the ‘xmlns-prefix’ and ‘xmlns-name’ function
    respectively.  Strings are interpreted as namespace prefixes and the
    corresponding namespace names are looked up in the ‘*xml-namespaces*’
    special variable.
   Keyword argument HEADER is the contents of the SOAP header.
   The body (and the header) are CXML serialization forms.

   Return value is the SOAP message as a string.

   For example, the form

        (with-soap-envelope (:xml-namespaces '(("ser" . "http://example.com/service/1.0/")))
          (cxml:with-element "ser:fubar"
            (cxml:with-element "baz" (cxml:text "hack"))))

   creates this SOAP message:

        <env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
                      xmlns:ser="http://example.com/service/1.0/">
         <env:Header/>
         <env:Body>
          <ser:fubar>
           <baz>hack</baz>
          </ser:fubar>
         </env:Body>
        </env:Envelope>

   The indentation is only added for visualization effects.  The actual
   SOAP message does not contain any superfluous whitespace characters.

                                                                      [Function]
xml-parse (source &rest options &key (result-type 'dom:document)
           &allow-other-keys)
   Parse an XML document.

   First argument SOURCE is the input object.  Value is either a stream,
    a string, or a pathname.  The symbol ‘t’ is equal to the value of the
    ‘*standard-input*’ special variable.
   Keyword argument RESULT-TYPE specifies the Lisp representation of the
    XML document.  Value is either ‘:dom’ for a ‘dom:document’ or ‘:stp’
    for a ‘stp:document’.  The default is to create a ‘dom:document’.
   Remaining keyword arguments are forwarded to the underlying
    ‘cxml:parse’ function.

   Return value is the Lisp representation of the XML document.

                                                                      [Function]
xml-serialize (destination document &rest options &key encoding canonical
               (declaration t) indentation &allow-other-keys)
   Serialize the Lisp representation of an XML document.

   First argument DESTINATION is the output object.  Value is either
    a stream, a string, or a pathname.  The symbol ‘t’ is equal to
    ‘*standard-output*’ and ‘nil’ means to return a string.
   Second argument DOCUMENT is the Lisp representation of the XML
    document to be serialized.  Value is either a ‘dom:document’ or
    a ‘stp:document’ object.
   Keyword arguments ENCODING, CANONICAL, DECLARATION, and INDENTATION
    are used to initialize a CXML sink object.
   Remaining keyword arguments are forwarded to the underlying DOM
    mapping function.

   If DESTINATION is a stream, a string, a pathname, or ‘t’, then the
   result is ‘nil’.  Otherwise, the result is a string containing the
   XML document.

                                                                      [Function]
xmlns-name (object)
   Return the namespace name of an XML namespace object.

   Argument OBJECT is the XML namespace object.

   Return value is a string.

   Exceptional situations:

      * Signals a type error if the value returned by the
        ‘xmlns-get-name’ function is not a string.

                                                                      [Function]
xmlns-prefix (object)
   Return the namespace prefix of an XML namespace object.

   Argument OBJECT is the XML namespace object.

   Return value is a string.

   Exceptional situations:

      * Signals a type error if the value returned by the
        ‘xmlns-get-prefix’ function is not a string.
