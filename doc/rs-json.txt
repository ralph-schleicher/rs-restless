DE.RALPH-SCHLEICHER.RESTLESS/JSON

Yet another JSON decoder/encoder.

If you can't wait until YASON is fixed, then this library is for you.
The main differences are listed below.

   * The parser is strictly RFC 8259 compliant whenever it makes
     sense.  However, you can tweak the behavior of the parser to
     suite your needs.

   * The printer does not support indentation.

   * JSON objects can be represented as hash-tables, associated lists,
     or property lists.  The default is to use alists.

   * JSON arrays can be represented as vectors or lists.  The default
     is to use vectors.

   * The JSON values ‘true’, ‘false’, and ‘null’ are represented by
     the keywords ‘:true’, ‘:false’, and ‘:null’ respectively.  But
     you can change that to suite your needs.

   * The default configuration is round-trip save, i.e. you can read
     a JSON value and write it back without loss of information.  This
     is a strict requirement when updating a Web resource via an HTTP
     GET/PUT cycle.

   * Performance is competitive to other “fast” JSON libraries out
     there.

                                                                     [Condition]
encoding-error
   Condition type for an encoding error.

                                                                     [Condition]
json-error
   Base class for all JSON errors.

                                                                     [Condition]
syntax-error
   Condition type for a syntax error.

                                                              [Special Variable]
*allow-duplicate-object-keys*
   Whether or not to accept duplicate keys in JSON objects.
   If enabled, the value of an existing object member is replaced by a
   successive object member with the same key.  Special value ‘:ignore’
   means to ignore successive duplicate object members, i.e. the value
   of an existing object member will not be replaced.
   If disabled, signal a ‘syntax-error’.  This is the default.

   ECMA-404 says nothing about duplicate object keys.  RFC 8259 says
   that object keys should be unique.  Anyway, with this user option,
   you have the choice.

                                                              [Special Variable]
*allow-lax-numbers*
   Whether or not to accept non-standard syntax of numbers.
   If enabled, numbers may have an explicit plus sign and digits
   before or after the decimal point may be omitted.  Disabled
   by default.

                                                              [Special Variable]
*allow-literal-object-keys*
   Whether or not to accept literal names as keys of object members.
   Disabled by default.

                                                              [Special Variable]
*allow-trailing-comma*
   Whether or not to accept a comma after the last object member
   or after the last array element.  Disabled by default.

                                                              [Special Variable]
*allow-unicode-whitespace*
   Whether or not to accept any Unicode whitespace character.
   Disabled by default.

                                                              [Special Variable]
*array-as*
   The Lisp data structure used to represent JSON arrays.
   Value is either ‘:vector’ or ‘:list’.  The default is to use
   vectors.

                                                              [Special Variable]
*false*
   The symbol to represent the JSON value ‘false’.
   Default is ‘:false’, but ‘nil’ may be appropriate, too.
   For the later, please take care of ambiguities since ‘nil’
   also represents the empty list.

                                                              [Special Variable]
*list-encoder*
   The actual function used to encode a list.

   Suitable values are ‘encode-object’ or ‘encode-array’ to encode
   a list as a JSON object or as a JSON array respectively.  Default
   is ‘encode-object’ in accordance with the default value of the
   ‘*object-as*’ special variable.

   The function is called with one argument, the list.  The return
   value of the function is ignored.

   See also the ‘*nil-encoder*’ special variable.

                                                              [Special Variable]
*maximum-nesting-depth*
   The maximum number of nested JSON structures.
   Value must be a positive number and should be at least 20.
   A value of ‘nil’ means to not limit the depth of nesting.

                                                              [Special Variable]
*nil-encoder*
   The actual function used to encode ‘nil’.

   Suitable values are ‘encode-list’, ‘encode-false’, or ‘encode-null’
   to encode ‘nil’ as a list, as the JSON ‘false’ value, or as the JSON
   ‘null’ value respectively.  Default is ‘encode-list’ in accordance
   with the default value of the ‘*object-as*’ special variable.

                                                              [Special Variable]
*null*
   The symbol to represent the JSON value ‘null’.
   Default is ‘:null’, but ‘nil’ may be appropriate, too.
   For the later, please take care of ambiguities since ‘nil’
   also represents falsity and the empty list.

                                                              [Special Variable]
*object-as*
   The Lisp data structure used to represent a JSON object.
   Value is either ‘:hash-table’, ‘:alist’, or ‘:plist’.  The default
   is to use alists.

   For hash tables and alists, object keys are compared with ‘equal’,
   i.e. using strings as object keys works as expected.  For plists,
   object keys are compared with ‘eql’, i.e. you should also set
   ‘*object-key-decoder*’ to a function returning a symbol when
   parsing objects as plists.

                                                              [Special Variable]
*object-key-decoder*
   The function to convert the key string of an object member.
   Default is the ‘identity’ function.

   The function is called with one argument, the key string.  The value
   of the function is used as the key for the data structure produced.
   See also the ‘*decode-object-as*’ special variable.

                                                              [Special Variable]
*true*
   The symbol to represent the JSON value ‘true’.
   Default is ‘:true’, but ‘t’ may be appropriate, too.

                                                              [Generic Function]
encode (object)
   Encode a Lisp object as a JSON value.

   Argument OBJECT is the Lisp object to be serialized.

   The JSON output is written to the ‘*standard-output*’ stream.
   The return value of an ‘encode’ method is ignored.

                                                                        [Method]
encode ((object list))
   Encode a list by calling ‘*list-encoder*’.

                                                                        [Method]
encode ((object (eql nil)))
   Encode ‘nil’ by calling ‘*nil-encoder*’.

                                                                        [Method]
encode ((object (eql t)))
   Encode ‘t’ as a JSON ‘true’ value.

                                                                        [Method]
encode ((object (eql :null)))
   Encode ‘:null’ as a JSON ‘null’ value.

                                                                        [Method]
encode ((object (eql :false)))
   Encode ‘:false’ as a JSON ‘false’ value.

                                                                        [Method]
encode ((object (eql :true)))
   Encode ‘:true’ as a JSON ‘true’ value.

                                                                        [Method]
encode ((object real))
   Encode a floating-point number as a JSON number.

                                                                        [Method]
encode ((object rational))
   Encode a rational number as a JSON number.
   Affected by ‘*read-default-float-format*’.

                                                                        [Method]
encode ((object integer))
   Encode an integer as a JSON number.

                                                                        [Method]
encode ((object character))
   Encode a character as a JSON string.

                                                                        [Method]
encode ((object symbol))
   Encode a symbol as a JSON string.
   Affected by ‘*print-case*’.

                                                                        [Method]
encode ((object string))
   Encode a string as a JSON string.

                                                                        [Method]
encode ((object vector))
   Encode a vector as a JSON array.

                                                                        [Method]
encode ((object hash-table))
   Encode a hash table as a JSON object.

                                                                        [Method]
encode (object)
   The default encoding method.
   Signals an ‘encoding-error’.

                                                                      [Function]
encode-array (object)
   Encode a Lisp object as a JSON array.

   Argument OBJECT is the Lisp object to be serialized as a JSON array.
    Value has to be a sequence, i.e. a vector or a list.

   Mostly useful for binding ‘*list-encoder*’.

                                                                      [Function]
encode-false (object)
   Constantly print a JSON ‘false’ value.

   Mostly useful for binding ‘*nil-encoder*’.

                                                                      [Function]
encode-list (object)
   Encode a list by calling ‘*list-encoder*’.

   Mostly useful for binding ‘*nil-encoder*’.

                                                                      [Function]
encode-null (object)
   Constantly print a JSON ‘null’ value.

   Mostly useful for binding ‘*nil-encoder*’.

                                                                      [Function]
encode-object (object)
   Encode a Lisp object as a JSON object.

   Argument OBJECT is the Lisp object to be serialized as a JSON object.
    Value has to be a hash table, an associated list, or a property list.
   If OBJECT is a list, the value of the ‘*object-as*’ special variable
    affects the interpretation of OBJECT.

   Mostly useful for binding the ‘*list-encoder*’ special variable.

                                                                      [Function]
encoding-error (&optional datum &rest arguments)
   Signal an encoding error.

                                                                      [Function]
parse (source &key junk-allowed)
   Read a JSON value.

   First argument SOURCE is the input object.  Value is either a
    stream, a string, or a pathname.  The special value ‘t’ is
    equal to ‘*standard-input*’
   If keyword argument JUNK-ALLOWED is false, signal an error of
    type ‘syntax-error’ if a non-whitespace character occurs after
    the JSON value.

   Return value is the Lisp representation of the JSON value.

   Exceptional situations:

      * Signals an ‘end-of-file’ error if the input ends in the
        middle of a JSON value.

      * Signals a ‘syntax-error’ if the input contains an invalid
        JSON structure.

      * May signal an ‘arithmetic-error’ if a JSON number can not
        be represented as a Lisp number.

      * Signals a ‘program-error’ if JSON objects are parsed as
        plists and the return value of ‘*object-key-decoder*’
        is not a symbol, number, or character.

                                                                      [Function]
serialize (destination object)
   Print a Lisp data structure as a JSON value.

   First argument DESTINATION is the output object.  Value is either a
    stream, a string, or a pathname.  The special value ‘t’ is equal to
    ‘*standard-output*’ and ‘nil’ means to return a string.
   Second argument OBJECT is the Lisp object to be serialized.

   The actual serialization of a Lisp object as a JSON value is performed
   by the ‘encode’ methods (which see).

   If DESTINATION is a stream, a string, a pathname, or ‘t’, then the
   result is ‘nil’.  Otherwise, the result is a string containing the
   output.

   Exceptional situations:

      * Signals an ‘encoding-error’ if a Lisp object can not be
        encoded as a JSON value.

      * May signal an ‘arithmetic-error’ if a rational number is
        converted to a floating-point number.

                                                                      [Function]
syntax-error (&optional datum &rest arguments)
   Signal a syntax error.

                                                                         [Macro]
with-default-values ((&rest ignored) &body body)
   Establish a lexical environment with all special variables bound
   to their default values.
